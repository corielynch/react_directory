{"version":3,"sources":["components/Table.js","components/Input.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["TableView","props","Table","employeeList","length","map","employee","ID","scope","alt","src","picture","thumbnail","name","first","last","phone","email","TextBox","className","htmlFor","value","search","onChange","handleInputChange","list","type","placeholder","id","key","onClick","handleFormSubmit","axios","get","App","state","filteredList","event","target","setState","preventDefault","filteredArr","filter","person","toLowerCase","filteredLastNameArr","API","then","response","data","results","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6SA4CeA,EAzCG,SAACC,GACjB,OACE,kBAACC,EAAA,EAAD,KACE,+BACE,4BACE,iCACA,uCACA,0CACA,yCACA,qCACA,uCAIJ,+BACGD,EAAME,aAAaC,OAAS,EAAIH,EAAME,aAAaE,KAAI,SAACC,EAAUC,GACjE,OAAQ,4BACN,wBAAIC,MAAM,OAAOD,EAAK,GACtB,gCAAK,yBAAKE,IAAI,YAAYC,IAAKJ,EAASK,QAAQC,YAAhD,KACA,4BAAKN,EAASO,KAAKC,OACnB,4BAAKR,EAASO,KAAKE,MACnB,4BAAKT,EAASU,OACd,4BAAKV,EAASW,WAGd,4BACE,wBAAIT,MAAM,QACV,6BACA,6BACA,6BACA,6BACA,iCCGCU,MAnCf,SAAiBjB,GACf,OACE,6BACE,kDAMA,0BAAMkB,UAAU,UACd,2BAAOC,QAAQ,aAGf,2BACEC,MAAOpB,EAAMqB,OACbC,SAAUtB,EAAMuB,kBAChBX,KAAK,SACLY,KAAK,YACLC,KAAK,OACLP,UAAU,eACVQ,YAAY,2CACZC,GAAG,aACL,8BAAUA,GAAG,YACV3B,EAAME,aAAaE,KAAI,SAAAF,GAAY,OAClC,4BAAQkB,MAAOlB,EAAc0B,IAAK1B,QAGtC,4BAAQuB,KAAK,SAASI,QAAS7B,EAAM8B,iBAAkBZ,UAAU,mBAAjE,a,iBCxBO,EACL,WACN,OAAOa,IAAMC,IALD,0CC4DDC,E,4MAtDbC,MAAQ,CACNhC,aAAc,GACdiC,aAAc,GACdd,OAAQ,I,EAWVE,kBAAoB,SAAAa,GAClB,IAAMhB,EAAQgB,EAAMC,OAAOjB,MACrBR,EAAOwB,EAAMC,OAAOzB,KAC1B,EAAK0B,SAAL,eAAiB1B,EAAOQ,K,EAG1BU,iBAAmB,SAAAM,GACjBA,EAAMG,iBACN,IAAMC,EAAc,EAAKN,MAAMhC,aAAauC,QAAO,SAAAC,GACjD,OAAOA,EAAO9B,KAAKC,MAAM8B,gBAAkB,EAAKT,MAAMb,OAAOsB,iBAE/D,EAAKL,SAAS,CAAEH,aAAcK,IAE9B,IAAMI,EAAsB,EAAKV,MAAMhC,aAAauC,QAAO,SAAAC,GACzD,OAAOA,EAAO9B,KAAKE,KAAK6B,gBAAkB,EAAKT,MAAMb,OAAOsB,iBAE9D,EAAKL,SAAS,CAAEH,aAAcS,K,kEAxBX,IAAD,OAClBC,IAAaC,MAAK,SAAAC,GAChB,EAAKT,SAAS,CAAEpC,aAAc6C,EAASC,KAAKC,UAC5C,EAAKX,SAAS,CAAEH,aAAcY,EAASC,KAAKC,e,+BAyB9C,OACE,oCACE,kBAAC,EAAD,CACE1B,kBAAmB2B,KAAK3B,kBACxBrB,aAAcgD,KAAKhB,MAAMhC,aACzB4B,iBAAkBoB,KAAKpB,mBAIzB,kBAAC,EAAD,CACE5B,aAAcgD,KAAKhB,MAAMC,oB,GA9CjBgB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.66950906.chunk.js","sourcesContent":["import React from 'react';\nimport { Table } from 'reactstrap';\n\nconst TableView = (props) => {\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>Picture</th>\n          <th>First Name</th>\n          <th>Last Name</th>\n          <th>Phone</th>\n          <th>Email</th>\n\n        </tr>\n      </thead>\n      <tbody>\n        {props.employeeList.length > 0 ? props.employeeList.map((employee, ID) => {\n          return (<tr>\n            <th scope=\"row\">{ID + 1}</th>\n            <td> <img alt=\"thumbnail\" src={employee.picture.thumbnail} /> </td>\n            <td>{employee.name.first}</td>\n            <td>{employee.name.last}</td>\n            <td>{employee.phone}</td>\n            <td>{employee.email}</td>\n          </tr>)\n        }) : (\n            <tr>\n              <th scope=\"row\"></th>\n              <td></td>\n              <td></td>\n              <td></td>\n              <td></td>\n              <td></td>\n            </tr>\n          )}\n\n\n      </tbody>\n    </Table>\n  );\n}\n\nexport default TableView;","import React from \"react\";\n\nfunction TextBox(props) {\n  return (\n    <div>\n      <h1>Employee Directory</h1>\n\n\n      \n      \n\n      <form className=\"search\">\n        <label htmlFor=\"employee\"></label>\n\n\n        <input\n          value={props.search}\n          onChange={props.handleInputChange}\n          name=\"search\"\n          list=\"employees\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Search an Employee by First or Last Name\"\n          id=\"employee\" />\n        <datalist id=\"emloyees\">\n          {props.employeeList.map(employeeList => (\n            <option value={employeeList} key={employeeList} />\n          ))}\n        </datalist>\n        <button type=\"submit\" onClick={props.handleFormSubmit} className=\"btn btn-success\">\n          Search\n        </button>\n      </form>\n    </div>\n  )\n}\n\nexport default TextBox;\n","import axios from \"axios\";\n\nconst BASEURL = \"https://randomuser.me/api/?results=50\";\n\n// Export an object with a \"search\" method that searches the Giphy API for the passed query\nexport default {\n  search: function() {\n    return axios.get(BASEURL);\n  }\n};","import React, { Component } from 'react';\nimport './App.css';\nimport Table from \"./components/Table\"\nimport TextBox from \"./components/Input\"\nimport API from \"./utils/API\"\n\nclass App extends Component {\n\n  state = {\n    employeeList: [],\n    filteredList: [],\n    search: \"\"\n  }\n\n  componentDidMount() {\n    API.search().then(response => {\n      this.setState({ employeeList: response.data.results })\n      this.setState({ filteredList: response.data.results })\n\n    })\n  }\n\n  handleInputChange = event => {\n    const value = event.target.value;\n    const name = event.target.name;\n    this.setState({ [name]: value });\n  };\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    const filteredArr = this.state.employeeList.filter(person => {\n      return person.name.first.toLowerCase() === this.state.search.toLowerCase();\n    });\n    this.setState({ filteredList: filteredArr })\n\n    const filteredLastNameArr = this.state.employeeList.filter(person => {\n      return person.name.last.toLowerCase() === this.state.search.toLowerCase();\n    });\n    this.setState({ filteredList: filteredLastNameArr })\n  };\n\n  render() {\n    return (\n      <>\n        <TextBox\n          handleInputChange={this.handleInputChange}\n          employeeList={this.state.employeeList}\n          handleFormSubmit={this.handleFormSubmit}\n\n\n        />\n        <Table\n          employeeList={this.state.filteredList}\n\n        />\n\n      </>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}